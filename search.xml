<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ansible的一些小tips]]></title>
    <url>%2F2018%2F01%2F12%2Fansible%2F</url>
    <content type="text"><![CDATA[自动化工具当中，一直使用的是ansible。而之所以选择它，不仅仅是因为agentless的便利，也是因为ansible的灵活，ad-hoc的简单易用，role的强大。在使用ansible的过程中，除了常用的各模块的使用方法，还积累了一些用得较少的经验，在此以tips的方式记录在此。 批量建立信任连接1ansible webserver -m authorized_key -a "key=\"&#123;&#123;lookup('file','~/.ssh/id_rsa.pub')&#125;&#125;\" user=$USER" -u user -k 在使用ansible的时候，通常我们都认为它是agentless的，这也是它最吸引人的特点之一。但是严格意义上，ansible也是有agent的。它的agent就是我们熟悉的sshd，只不过sshd是linux的内核标配，所以被大家熟知为无agent的自动化运维工具。因此使用ansible之前，我们虽然不需要对目标主机安装agent，但需要对我们的目标主机做信任连接，这也就等价于安装agent的过程了。对大规模主机做信任连接是件费时费力的事，ansible的authorized_key模块就是为此而生的。代码段中，key的值为公钥的路径，user为目标主机的目标用户，“-k”参数为手动输入密码一次。 动态使用inventory文件一般来说，我们会将服务列表都放在同一个inventory（比如/etc/ansible/hosts）文件中；但在有些特殊应用场景（比如测试的时候），我们往往需要使用临时inventory文件。ansible给我们提供“-i”参数手动指定inventory文件，ansible和ansible-playbook都可以使用这个参数。比如：1ansible -i ./tmp_host all -m shell -a "echo test" ansible forksAnsible与远端节点交流是通过并行的机制，并行机制的方式可以通过传递“–forks=#”或“-f #”参数设置，或者在配置文件里面编辑。默认是保守的5个线程。如果你有足够的内存，你可以很容易的设置为50或者更多值。所以经常有人诟病ansible效率太差，是因为他只用到了默认的5个线程。当需要执行大规模的批量操作时，根据需要调高这个参数即可：1ansible -i ./tmp_host all -m shell -a "echo test" -f 30 快固然好，但有时候，我们也需要让我们的程序慢下来。当我们在做灰度发布的时候，往往是一批一批的更新我们的服务。但当我们的服务集群比较小，比如仅有两个实例的互备服务，我们在发布的时候为了不影响用户的体验，我们可以使用“-f”调小并发数，达到平滑发布的效果。1ansible tomcat_server -m shell -a "sh /usr/local/tomcat/bin/shutdown.sh &amp;&amp; sh /usr/local/tomcat/bin/startup.sh" -f 1 inventory的行为参数我们有时候需要在ansible inventory文件中配置ssh的一些参数，我们需要定义主机名，以及ansible的ssh客户端可以连接到的端口(22,2222,22300)等，那么ansible将这些变量命名为inventory的行为参数，如下：123456789名称 默认值 描述ansible_ssh_host 主机的名字 SSH目的主机名或IPansible_ssh_port 22 SSH目的端口ansible_ssh_user root SSH登录使用的用户名ansible_ssh_pass none SSH认证所使用的密码ansible_connection smart ansible使用何种连接模式连接到主机ansible_ssh_private_key_file none SSH认证所使用的私钥ansible_shell_type sh 命令所使用的shellansible_python_interpreter /usr/bin/python 主机上的python解释器 Group Varsgroup vars写在inventory中：1234567[atlanta]host1host2[atlanta:vars]ntp_server=ntp.atlanta.example.comproxy=proxy.atlanta.example.com group_vars文件也可位于一个目录下面，同时在inventory旁边，有一个可选的文件名在每个组后面。这是一个方便的位置来存放变量，提供给每个组，由其是复杂的数据结构，因此这些变量不需要嵌入在inventory文件或playbook文件里面。123File: /etc/ansible/group_vars/groupadmin_user: tomansible_ssh_pass: password Host Varshost vars写在inventory中：123[atlanta]host1 http_port=80 maxRequestsPerChild=808host2 http_port=303 maxRequestsPerChild=909 就像”Group Vars”，也有一个名称为“host_vars/”的目录在inventory文件旁，可以在invetory文件的主机名后面包含这个文件，使用 YAML 格式。这提供一个方便的位置分配变量给这个主机而不要在inventory文件里面嵌入太多变量。Host Vars 文件还可以用于定义复杂的在inventory文件里面不断出现的数据结构。12File: /etc/ansible/host_vars/host1admin_user: john 异步和轮询ansible有时候要执行等待时间很长的操作,这个操作可能要持续很长时间,设置超过ssh的timeout.这时候你可以在step中指定async和poll来实现异步操作async表示这个step的最长等待时长,如果设置为0,表示一直等待下去直到动作完成.poll 表示检查step操作结果的间隔时长.例一：1234567- name: Test hosts: localhost tasks: - name: wair for shell: sleep 16 async: 10 poll: 2 这个step失败, 因为操作时间超过了最大等待时长例二:1234567- name: Test hosts: localhost tasks: - name: wair for shell: sleep 16 async: 10 poll: 0 结果:1234TASK: [wair for] **************************************************************&lt;job 621720484791.102116&gt; finished on localhostPLAY RECAP ******************************************************************** poll 设置为0, 表示不用等待执行结果, 该step执行成功例三:1234567- name: Test hosts: localhost tasks: - name: wair for shell: sleep 16 async: 0 poll: 10 结果:123456789# time ansible-playbook xiama.ymlTASK: [wair for] **************************************************************changed: [localhost]PLAY RECAP ********************************************************************localhost : ok=2 changed=1 unreachable=0 failed=0real 0m16.693s async设置为0, 会一直等待直到该操作完成. 以上。]]></content>
      <categories>
        <category>技术进步</category>
      </categories>
      <tags>
        <tag>ansible</tag>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[next主题fullimage显示不居中问题]]></title>
    <url>%2F2018%2F01%2F01%2Ftest-art%2F</url>
    <content type="text"><![CDATA[使用好hexo和next搭建好自己的博客之后，就到了等待备案的日子. 小小抱怨一下不得不说备案真是一个让人抓狂的过程，之前对公司备案的繁琐有所经历，没想到个人备案也是不遑多让。服务器是在阿里云上，阿里云在备案方面帮着省去了很多的备案步骤，结果还是弄得我够呛，关于备案在之前的文章有详细提及。 遇到的问题这次是在阅读iissnan大神文档的时候，发现了FullImage的功能，觉得很酷炫，就想着用着试试。结果一直没达到文档中的效果，图片的尺寸是超出700px了，但是愣是不居中，效果有点尴尬。 解决思路和过程开始猜测是next尺寸的问题，翻了半天，发现自己并没有使用custom.yml调整过尺寸，并且尴尬的是不论怎么调整尺寸都还是一样。秉持着”有啥不懂看官方文档”的宗旨，把作者的文档来来回回看了两遍，看自己的配置是否有问题，结果无功而返。然后直接搜索引擎搜是否有朋友有过类似的困扰，也没有搜到。然后继续寻找NexT主题相关社区，想着提个问题什么的，也没找到靠谱活跃的社区。最终在GitHub上找到了十几天前有位朋友开了个一模一样的issue #2039，并且已经在#2043得到了解决。 以上。]]></content>
      <categories>
        <category>技术进步</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>problems</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[这是个人网站的第一篇博客，标题就直接用了‘Hello World’。刚开始接触CS的时候，总是略微有些嫌弃‘Hello World’的，可能是这个梗被用得太多，有点嚼烂了的感觉。不过随着时间的推移，越来越喜欢‘Hello world’这个词了。因为每次屏幕上出现的‘Hello World’，总是伴随着新知识的学习，或是新作品的诞生！就像棋手落下的第一子、画家挥下的第一笔…矫情的废话不多说，James’s note主要会记录以下的一些内容。 Tech BlogJames’s note最最主要的作用就是记录关于技术方面的博客，文章，思考，也就是类似于笔记本的作用。关于技术的，不论是长篇大论，还是自己工作中接触到问题的反思和总结,抑或是一个代码片段，都会记录在这边。 Note Life另一方面，主要会记录自己的一些生活经历，出行，有感等等。 Something Else最后，就是一些七七八八的，想要随便写写的杂文了。 At Last希望自己能够多坚持一些，长期，持续地维护好这个主页，在这期间也能持续地不断成长！ More info: HomePage 以上。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[建站请绕道：备案辛酸路]]></title>
    <url>%2F2017%2F10%2F13%2Fbeian%2F</url>
    <content type="text"><![CDATA[自建blog的想法是早就有了的，但是无奈deadline才是第一生产力，这个事情一直拖到前一段时间才得以真正开展。本以为当hexo和NexT两个工具选好了之后，建站对我这个运维来说，不就是分分钟的事情么？可是…我终究还是naive啊。 响应党的号召：备案光荣在namecheap上成功买了域名（PS.不得不说namecheap的服务是真的比狗爹好多了）；就着手在aliyun上买ecs，结果一犯二就买了华南的服务器，当时我并不知道我将会面对什么。修改好dns_server，待其生效便调试了起来，然后就收到党的号召，需要备案。一直以来，我都是一个根正苗红，又红又专的好青年，对于党的这种无理的要求，你问我支不支持，我当然支持。于是我就走上了备案这条不归路。 阿里云建站许久之前刚入行的时候，记得那时候备案是真心麻烦，需要带着你的各种证件，去到专门的“有关部门”，各种拍照，审查，必须经历很长的周期才能成功。现在因为是在阿里云买了服务器，阿里也和审查机构简化了一些流程，现在只需要在阿里云上upload一些文件和证件，似乎就可以备案成功了。 一波三折之所以是“似乎”，是当我开开心心上传各种资料的时候，发现除了身份证、手机号之外，赫然还需要居住证。当时我就蒙蔽了，“身份证信息如非上海市需提供上海市‘临时居住证’或‘居住证’”。难道还专门为了这事去有关部门办一个暂住证？知乎上一问，发现并不是所有地区的备案都需要暂住证，四川、福建等地方是不需要的。所以备案时你所在的地址填这些地方即可。然后顺利拍摄好各种资料上传完成，可不到一天，就被短信告知备案初审就没通过。还是要夸一下阿里云的工作人员的服务，第一时间电话和我沟通，非常仔细地告诉我哪些地方需要修改，然后还给了我一些小建议。还能怎么办呢？挨个解决问题呗。 域名持有者与主办单位不一致其实就是我在namecheap上填写的所有者的名字并不是我的真名（全拼也可以），关于域名的所有者，到任意一个whois网站上可以查询到域名的所有者，当然要放开namecheap上的whois privacy才能查到，你可以试试自己的域名的whois是谁。在namecheap的控制页上，找了半天还找不到修改域名所有者的操作，索性直接找了他们的客服帮忙修改，服务态度也是很好，虽然我的英语是真的烂。 网站名称不合格网站名称不能为“xxx的个人网站”等各种要求，随便改一个名字就可以了。 未取得备案号禁止访问我在申请好域名，配置好DNS之后就尝试着起了web服务调试了起来，好吧，这也是不行的，先关闭呗。 再次提交改好了以上三项，再次提交，很顺利地通过了初审。然后过了大概三天，通知我已经提交管局审核，看起来一切都是那么顺利。结果一天之后，再次传来审核失败的消息。“域名不存在注册商验证库中”，简单来说呢，就是域名是国外的，是有关部门无法掌控的，有关部门希望你把域名转回到国内的服务商来托管。简直了，当时心里有句MMP，也就大声讲了一万多遍。所以摆在我面前的唯一出路，就是将放在namecheap上的域名转回到万网上来。出路是有出路，可是怎么就感觉那么操蛋呢？我只是想简简单单弄个小网站而已…最后我毅然选择不走这条转域名的唯一出路，又弄了一台香港的服务器，项目往上一部署，DNS一修改，齐活。备案？爱谁谁吧！ 经验总结写这么多，经验总结就是老老实实域名服务器都买国外的吧，别把时间浪费在备案上面了。 以上。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jenkins+ansible持续集成之自动发布脚本]]></title>
    <url>%2F2017%2F08%2F03%2Fansi-ci%2F</url>
    <content type="text"><![CDATA[工作中使用jenkins已经很久了，很早就想总结一下自己的一些使用情况，本文主要记录一下自动发布的模板脚本。 首先说明jenkins无疑是近几年来最炙手可热的持续集成工具，功能强大，插件应有尽有，社区活跃，且被众多大公司实际生产中应用。关于jenkins，在此就不详细介绍了（主要是我也还远没了解透彻）。要想详细了解jenkins，请直接查看官方文档有详细提及。 主要应用点jenkins是一个功能强大的工具，但我司目前还只是用来做自动拉取代码、打包、发布这几项工作，主要涉及的工具是jenkins和ansible。使用jenkins自动拉取代码，自动构建，ansible完成发布工作。 简单讲解jenkins中主要是使用了maven（针对maven项目）和git两个插件.ansible则可以使用command_line、play_book或者role都可以。由于应用环境简单，我直接使用了ansible的command_line。 jenkins中的shell1sh /deploy/jenkins_deploy_$&#123;JOB_NAME&#125;.sh jenkins-deploy-${JOB_NAME}.sh123456789101112131415161718192021#定义应用变量和应用目录，发布其它应用只需要把APP的值修改成相应的,比如APP=demo.war#需要修改APP这一处即可APP=app_name#定义发布应用的脚本变量，发布其它应用需要把DEPLOY_APP的值修改成相应的，DEPLOY_APP=deploy_$&#123;APP&#125;.sh#定义部署服务器组webservers=$&#123;APP&#125;DEP_PATH=dep_pathPAK_PATH=pak_path#应用服务器创建deploy目录ansible $webservers -u appsvr -m shell -a "mkdir -p $&#123;DEP_PATH&#125;"#将war包复制到应用服务器的/deployansible $webservers -u appsvr -m copy -a "src=$&#123;PAK_PATH&#125;/$&#123;APP&#125;-1.0-SNAPSHOT.jar dest=$&#123;DEP_PATH&#125; owner=appsvr group=appsvr mode=0755 "#将构建ID号复制到应用服务器的/deploy下#ansible $webservers -u qappsom -m copy -a "src=/deploy/$LASTBUILD dest=/deploy/ owner=qappsom group=grpadm mode=0755 "#将部署脚本复制到应用服务器的/deploy下ansible $webservers -u appsvr -m copy -a "src=$&#123;DEP_PATH&#125;/$DEPLOY_APP dest=$&#123;DEP_PATH&#125; owner=appsvr group=appsvr mode=0644 "#执行发布脚本ansible $webservers -u appsvr -m shell -a "sh /$&#123;DEP_PATH&#125;/$&#123;DEPLOY_APP&#125;" -f 1 deploy_${JOB_NAME}.sh1234567891011121314151617181920212223242526272829303132333435363738#如果新增模块，只需复制本脚本，然后把APP的变量值改成相对应的模块名即可。比如,APP=oms#只需要改1处source /etc/profileAPP=app_nameNOW=`date +%Y%m%d-%H%M%S`BACKUP_PATH=back_pathAPP_PATH=app_pathDEP_PATH=dep_pathJAR_NAME=$&#123;APP&#125;-xxx.jar###先确定是否存在备份目录，不存在则创建if [ ! -d "$&#123;BACKUP_PATH&#125;" ]then mkdir -p $&#123;BACKUP_PATH&#125;fi###备份原有jar包，加上时间后缀if [ -f "$&#123;APP_PATH&#125;/$&#123;JAR_NAME&#125;" ]then cp -v $&#123;APP_PATH&#125;/$&#123;JAR_NAME&#125; $&#123;BACKUP_PATH&#125;/$&#123;JAR_NAME&#125;_bak$&#123;NOW&#125; echo "backup is done !"else mkdir -p $&#123;APP_PATH&#125; echo "this is the first time delpoying the $APP !"fi###覆盖应用jar包，重启服务cp -v $&#123;DEP_PATH&#125;$&#123;JAR_NAME&#125; $&#123;APP_PATH&#125;/echo "copying $&#123;JAR_NAME&#125; to $&#123;APP_PATH&#125; down!"until ! [ $(ps -ef|grep "$&#123;JAR_NAME&#125;"|grep -v grep|awk '&#123;print$2&#125;') ];do echo -e "\033[32m [INFO]: killing the $&#123;APP&#125; process ... \033[0m" ps -ef|grep "$&#123;JAR_NAME&#125;"|grep -v grep|awk '&#123;print$2&#125;'|xargs kill sleep 3doneecho "restarting new $&#123;APP&#125; process..."nohup $&#123;JAVA_HOME&#125;/bin/java -jar $&#123;APP_PATH&#125;/$&#123;JAR_NAME&#125; &gt; /dev/null 2&gt;&amp;1 &amp;echo "The $&#123;APP&#125; has stated ! "ps -ef|grep "$&#123;JAR_NAME&#125;"|grep -v grepexit 以上。]]></content>
      <categories>
        <category>技术进步</category>
      </categories>
      <tags>
        <tag>ansible</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
</search>
